{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport PollView from \"./PollView\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar BASE_URL = 'http://192.168.1.140:8000';\nvar dimensions = Dimensions.get(\"screen\");\n\nvar HomeScreen = function HomeScreen() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      posts = _useState4[0],\n      setPosts = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  useEffect(function () {\n    fetchDataFromApi();\n  }, []);\n\n  var fetchDataFromApi = function fetchDataFromApi() {\n    var url, res;\n    return _regeneratorRuntime.async(function fetchDataFromApi$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = BASE_URL + \"/polls/\";\n            setLoading(true);\n            res = fetch(url, {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            }).then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              setPosts(data);\n              setLoading(false);\n            }).catch(function (error) {\n              console.error(error);\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(ScrollView, {\n    decelerationRate: 0,\n    snapToAlignment: \"lefts\",\n    snapToInterval: dimensions.height,\n    showsVerticalScrollIndicator: false,\n    children: _jsx(View, {\n      style: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column'\n      },\n      children: posts.map(function (post, idx) {\n        return _jsx(PollView, {\n          question: post.question_text,\n          choices: post.choices\n        }, idx);\n      })\n    })\n  });\n};\n\nexport default HomeScreen;","map":{"version":3,"sources":["C:/Users/camer/Documents/GitHub/pollish-rn/screens/HomeScreen.js"],"names":["React","useState","useEffect","PollView","BASE_URL","dimensions","Dimensions","get","HomeScreen","loading","setLoading","posts","setPosts","error","setError","fetchDataFromApi","url","res","fetch","method","headers","then","json","data","catch","console","height","flex","alignItems","justifyContent","flexDirection","map","post","idx","question_text","choices"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;;;AAEA,OAAOC,QAAP;;AAEA,IAAMC,QAAQ,GAAG,2BAAjB;AACA,IAAMC,UAAU,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAnB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,kBAA8BP,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOQ,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAA0BT,QAAQ,CAAC,EAAD,CAAlC;AAAA;AAAA,MAAOU,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA0BX,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOY,KAAP;AAAA,MAAcC,QAAd;;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,gBAAgB;AACjB,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,GADiB,GACRZ,QADQ;AAGvBM,YAAAA,UAAU,CAAC,IAAD,CAAV;AAEMO,YAAAA,GALiB,GAKXC,KAAK,CAACF,GAAD,EAAM;AACrBG,cAAAA,MAAM,EAAE,KADa;AAErBC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAFY,aAAN,CAAL,CAMTC,IANS,CAMJ,UAAAJ,GAAG;AAAA,qBAAIA,GAAG,CAACK,IAAJ,EAAJ;AAAA,aANC,EAOTD,IAPS,CAOJ,UAAAE,IAAI,EAAI;AACZX,cAAAA,QAAQ,CAACW,IAAD,CAAR;AACAb,cAAAA,UAAU,CAAC,KAAD,CAAV;AACD,aAVS,EAWTc,KAXS,CAWH,UAAAX,KAAK,EAAI;AACdY,cAAAA,OAAO,CAACZ,KAAR,CAAcA,KAAd;AACD,aAbS,CALW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAoBA,SACE,KAAC,UAAD;AACE,IAAA,gBAAgB,EAAE,CADpB;AAEE,IAAA,eAAe,EAAC,OAFlB;AAGE,IAAA,cAAc,EAAER,UAAU,CAACqB,MAH7B;AAIE,IAAA,4BAA4B,EAAE,KAJhC;AAAA,cAMA,KAAC,IAAD;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,IAAI,EAAE,CADD;AAELC,QAAAA,UAAU,EAAE,QAFP;AAGLC,QAAAA,cAAc,EAAE,QAHX;AAILC,QAAAA,aAAa,EAAE;AAJV,OADT;AAAA,gBAOGnB,KAAK,CAACoB,GAAN,CAAU,UAACC,IAAD,EAAOC,GAAP,EAAe;AACxB,eAAO,KAAC,QAAD;AAEL,UAAA,QAAQ,EAAED,IAAI,CAACE,aAFV;AAGL,UAAA,OAAO,EAAEF,IAAI,CAACG;AAHT,WACAF,GADA,CAAP;AAMD,OAPA;AAPH;AANA,IADF;AA2BD,CAxDD;;AA0DA,eAAezB,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {View, Text, ScrollView, Dimensions} from 'react-native';\r\nimport PollView from './PollView';\r\n\r\nconst BASE_URL = 'http://192.168.1.140:8000';\r\nconst dimensions = Dimensions.get(\"screen\");\r\n\r\nconst HomeScreen = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [posts, setPosts] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchDataFromApi();\r\n  }, []);\r\n\r\n  const fetchDataFromApi = async () => {\r\n    const url = `${BASE_URL}/polls/`;\r\n\r\n    setLoading(true);\r\n\r\n    const res = fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setPosts(data);\r\n        setLoading(false);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  };\r\n  return (\r\n    <ScrollView\r\n      decelerationRate={0}\r\n      snapToAlignment=\"lefts\"\r\n      snapToInterval={dimensions.height}\r\n      showsVerticalScrollIndicator={false}\r\n    >\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n      }}>\r\n      {posts.map((post, idx) => {\r\n        return <PollView \r\n          key={idx} \r\n          question={post.question_text}\r\n          choices={post.choices}\r\n          >\r\n        </PollView>;\r\n      })}\r\n    </View>\r\n    </ScrollView>\r\n\r\n    // <Text key={idx}>{post.question_text}</Text>;\r\n  );\r\n};\r\n\r\nexport default HomeScreen;\r\n"]},"metadata":{},"sourceType":"module"}