{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\CODE\\\\pollish\\\\PollishRN\\\\screens\\\\CreatePollScreen.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar BASE_URL = 'http://192.168.1.140:8000';\n\nvar CreatePollScreen = function CreatePollScreen(props) {\n  var _React$useState = _react.default.useState(\"\"),\n      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),\n      text = _React$useState2[0],\n      onChangeText = _React$useState2[1];\n\n  var _React$useState3 = _react.default.useState(\"\"),\n      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),\n      text2 = _React$useState4[0],\n      onChangeText2 = _React$useState4[1];\n\n  var _React$useState5 = _react.default.useState(\"\"),\n      _React$useState6 = (0, _slicedToArray2.default)(_React$useState5, 2),\n      text3 = _React$useState6[0],\n      onChangeText3 = _React$useState6[1];\n\n  var postPollToAPI = function _callee() {\n    var url, res;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = BASE_URL + \"/polls/\";\n            setLoading(true);\n            res = fetch(url, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({})\n            }).then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              setPosts(data);\n              setLoading(false);\n            }).catch(function (error) {\n              console.error(error);\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _react.default.createElement(_reactNative.View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, _react.default.createElement(_reactNative.Text, {\n    style: {\n      fontFamily: 'System',\n      fontWeight: 'bold',\n      marginVertical: 15\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, \"Question\"), _react.default.createElement(_reactNative.TextInput, {\n    style: styles.input,\n    onChangeText: onChangeText,\n    value: text,\n    placeholder: \"What do you want to know?\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }), _react.default.createElement(_reactNative.Text, {\n    style: {\n      fontFamily: 'System',\n      fontWeight: 'bold',\n      marginVertical: 15\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, \"Option 1\"), _react.default.createElement(_reactNative.TextInput, {\n    style: styles.input,\n    onChangeText: onChangeText2,\n    value: text2,\n    placeholder: \"Enter an option\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }), _react.default.createElement(_reactNative.Text, {\n    style: {\n      fontFamily: 'System',\n      fontWeight: 'bold',\n      marginVertical: 15\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, \"Option 2\"), _react.default.createElement(_reactNative.TextInput, {\n    style: styles.input,\n    onChangeText: onChangeText3,\n    value: text3,\n    placeholder: \"Enter an option\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }), _react.default.createElement(_reactNative.Button, {\n    onPress: onChangeText,\n    title: \"Post\",\n    color: \"#841584\",\n    accessibilityLabel: \"Learn more about this purple button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }));\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  input: {\n    height: 40,\n    margin: 12,\n    borderWidth: 1,\n    padding: 10\n  }\n});\n\nvar _default = CreatePollScreen;\nexports.default = _default;","map":{"version":3,"sources":["C:/CODE/pollish/PollishRN/screens/CreatePollScreen.js"],"names":["BASE_URL","CreatePollScreen","props","React","useState","text","onChangeText","text2","onChangeText2","text3","onChangeText3","postPollToAPI","url","setLoading","res","fetch","method","headers","body","JSON","stringify","then","json","data","setPosts","catch","error","console","fontFamily","fontWeight","marginVertical","styles","input","StyleSheet","create","height","margin","borderWidth","padding"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {View, Text, Dimensions, Image, Button, TextInput, StyleSheet} from 'react-native';\r\n\r\nconst BASE_URL = 'http://192.168.1.140:8000';\r\n\r\nconst CreatePollScreen = (props) => {\r\n    const [text, onChangeText] = React.useState(\"\");\r\n    const [text2, onChangeText2] = React.useState(\"\");\r\n    const [text3, onChangeText3] = React.useState(\"\");\r\n\r\n    const postPollToAPI = async () => {\r\n        const url = `${BASE_URL}/polls/`;\r\n    \r\n        setLoading(true);\r\n    \r\n        const res = fetch(url, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n\r\n          })\r\n        })\r\n          .then(res => res.json())\r\n          .then(data => {\r\n            setPosts(data);\r\n            setLoading(false);\r\n          })\r\n          .catch(error => {\r\n            console.error(error);\r\n          });\r\n      };\r\n\r\n    return (\r\n        <View>\r\n            <Text\r\n                style={{\r\n                    fontFamily: 'System',\r\n                    fontWeight: 'bold',\r\n                    marginVertical: 15\r\n                }}>Question</Text>\r\n            <TextInput\r\n            style={styles.input}\r\n            onChangeText={onChangeText}\r\n            value={text}\r\n            placeholder=\"What do you want to know?\"\r\n            />\r\n            <Text\r\n                style={{\r\n                    fontFamily: 'System',\r\n                    fontWeight: 'bold',\r\n                    marginVertical: 15\r\n                }}>Option 1</Text>\r\n            <TextInput\r\n            style={styles.input}\r\n            onChangeText={onChangeText2}\r\n            value={text2}\r\n            placeholder=\"Enter an option\"\r\n            />\r\n            <Text\r\n                style={{\r\n                    fontFamily: 'System',\r\n                    fontWeight: 'bold',\r\n                    marginVertical: 15\r\n                }}>Option 2</Text>\r\n            <TextInput\r\n            style={styles.input}\r\n            onChangeText={onChangeText3}\r\n            value={text3}\r\n            placeholder=\"Enter an option\"\r\n            />\r\n            <Button\r\n            onPress={onChangeText}\r\n            title=\"Post\"\r\n            color=\"#841584\"\r\n            accessibilityLabel=\"Learn more about this purple button\"\r\n            />\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    input: {\r\n      height: 40,\r\n      margin: 12,\r\n      borderWidth: 1,\r\n      padding: 10,\r\n    },\r\n  });\r\n  \r\n\r\nexport default CreatePollScreen;"]},"metadata":{},"sourceType":"script"}