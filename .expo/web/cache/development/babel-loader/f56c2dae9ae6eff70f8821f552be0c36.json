{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\camer\\\\Documents\\\\GitHub\\\\pollish-rn\\\\screens\\\\PollView.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar dimensions = _reactNative.Dimensions.get('screen');\n\nvar PollView = function PollView(props) {\n  var url = \"http://\" + \"192.168.1.140:8000\" + \"/polls\";\n\n  var handleRegisterVote = function _callee(id, votes) {\n    var requestOptions;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            requestOptions = {\n              method: 'PATCH',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                id: id,\n                votes: votes,\n                choice_text: 'test'\n              })\n            };\n            fetch(url + \"/test\", requestOptions).then(function (res) {\n              if (res.ok) {\n                console.log('vote registered success');\n              } else {\n                console.error('vote register fail');\n              }\n            });\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _react.default.createElement(_reactNative.View, {\n    style: {\n      width: dimensions.width,\n      height: dimensions.height\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.Image, {\n    source: require('./lebron.jpg'),\n    style: {\n      width: dimensions.width,\n      height: dimensions.width / 1.1,\n      alignContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }), _react.default.createElement(_reactNative.Text, {\n    style: {\n      fontFamily: 'System',\n      textAlign: 'center',\n      fontWeight: 'bold',\n      marginVertical: 15\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, props.question), _react.default.createElement(_reactNative.View, {\n    style: {\n      marginVertical: 15\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, props.choices.map(function (choice, index) {\n    return _react.default.createElement(_reactNative.Button, {\n      key: index,\n      title: choice.choice_text,\n      onPress: function onPress() {\n        return handleRegisterVote(choice.id, choice.votes);\n      },\n      style: {\n        textAlign: 'center',\n        padding: 20,\n        borderWidth: 3,\n        margin: 5\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    });\n  })));\n};\n\nvar _default = PollView;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/camer/Documents/GitHub/pollish-rn/screens/PollView.js"],"names":["dimensions","Dimensions","get","PollView","props","url","handleRegisterVote","id","votes","requestOptions","method","headers","body","JSON","stringify","choice_text","fetch","then","res","ok","console","log","error","width","height","require","alignContent","fontFamily","textAlign","fontWeight","marginVertical","question","choices","map","choice","index","padding","borderWidth","margin"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;;AAGA,IAAMA,UAAU,GAAGC,wBAAWC,GAAX,CAAe,QAAf,CAAnB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACxB,MAAMC,GAAG,8CAAT;;AAEA,MAAMC,kBAAkB,GAAG,iBAAOC,EAAP,EAAWC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBC,YAAAA,cADmB,GACF;AACrBC,cAAAA,MAAM,EAAE,OADa;AAErBC,cAAAA,OAAO,EAAE;AAAC,gCAAgB;AAAjB,eAFY;AAGrBC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBP,gBAAAA,EAAE,EAAEA,EADe;AAEnBC,gBAAAA,KAAK,EAAEA,KAFY;AAGnBO,gBAAAA,WAAW,EAAE;AAHM,eAAf;AAHe,aADE;AAWzBC,YAAAA,KAAK,CAAIX,GAAJ,YAAgBI,cAAhB,CAAL,CAAqCQ,IAArC,CAA0C,UAAAC,GAAG,EAAI;AAC/C,kBAAIA,GAAG,CAACC,EAAR,EAAY;AACVC,gBAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACD,eAFD,MAEO;AACLD,gBAAAA,OAAO,CAACE,KAAR,CAAc,oBAAd;AACD;AACF,aAND;;AAXyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA3B;;AAoBA,SACE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAEvB,UAAU,CAACuB,KADb;AAELC,MAAAA,MAAM,EAAExB,UAAU,CAACwB;AAFd,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKE,6BAAC,kBAAD;AACE,IAAA,MAAM,EAAEC,OAAO,CAAC,cAAD,CADjB;AAEE,IAAA,KAAK,EAAE;AACLF,MAAAA,KAAK,EAAEvB,UAAU,CAACuB,KADb;AAELC,MAAAA,MAAM,EAAExB,UAAU,CAACuB,KAAX,GAAmB,GAFtB;AAGLG,MAAAA,YAAY,EAAE;AAHT,KAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAaE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,UAAU,EAAE,QADP;AAELC,MAAAA,SAAS,EAAE,QAFN;AAGLC,MAAAA,UAAU,EAAE,MAHP;AAILC,MAAAA,cAAc,EAAE;AAJX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOG1B,KAAK,CAAC2B,QAPT,CAbF,EAsBE,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE;AACLD,MAAAA,cAAc,EAAE;AADX,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIG1B,KAAK,CAAC4B,OAAN,CAAcC,GAAd,CAAkB,UAACC,MAAD,EAASC,KAAT,EAAmB;AACpC,WACE,6BAAC,mBAAD;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,KAAK,EAAED,MAAM,CAACnB,WAFhB;AAGE,MAAA,OAAO,EAAE;AAAA,eAAMT,kBAAkB,CAAC4B,MAAM,CAAC3B,EAAR,EAAY2B,MAAM,CAAC1B,KAAnB,CAAxB;AAAA,OAHX;AAIE,MAAA,KAAK,EAAE;AACLoB,QAAAA,SAAS,EAAE,QADN;AAELQ,QAAAA,OAAO,EAAE,EAFJ;AAGLC,QAAAA,WAAW,EAAE,CAHR;AAILC,QAAAA,MAAM,EAAE;AAJH,OAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAaD,GAdA,CAJH,CAtBF,CADF;AA6CD,CApED;;eAsEenC,Q","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {View, Text, Dimensions, Image, Button} from 'react-native';\r\nimport {BASE_IP} from '@env';\r\n\r\nconst dimensions = Dimensions.get('screen');\r\n\r\nconst PollView = props => {\r\n  const url = `http://${BASE_IP}/polls`;\r\n\r\n  const handleRegisterVote = async (id, votes) => {\r\n    const requestOptions = {\r\n      method: 'PATCH',\r\n      headers: {'Content-Type': 'application/json'},\r\n      body: JSON.stringify({\r\n        id: id,\r\n        votes: votes,\r\n        choice_text: 'test',\r\n      }),\r\n    };\r\n\r\n    fetch(`${url}/test`, requestOptions).then(res => {\r\n      if (res.ok) {\r\n        console.log('vote registered success');\r\n      } else {\r\n        console.error('vote register fail');\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        width: dimensions.width,\r\n        height: dimensions.height,\r\n      }}>\r\n      <Image\r\n        source={require('./lebron.jpg')}\r\n        style={{\r\n          width: dimensions.width,\r\n          height: dimensions.width / 1.1,\r\n          alignContent: 'center',\r\n        }}\r\n      />\r\n      <Text\r\n        style={{\r\n          fontFamily: 'System',\r\n          textAlign: 'center',\r\n          fontWeight: 'bold',\r\n          marginVertical: 15,\r\n        }}>\r\n        {props.question}\r\n      </Text>\r\n      <View\r\n        style={{\r\n          marginVertical: 15,\r\n        }}>\r\n        {props.choices.map((choice, index) => {\r\n          return (\r\n            <Button\r\n              key={index}\r\n              title={choice.choice_text}\r\n              onPress={() => handleRegisterVote(choice.id, choice.votes)}\r\n              style={{\r\n                textAlign: 'center',\r\n                padding: 20,\r\n                borderWidth: 3,\r\n                margin: 5,\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default PollView;\r\n"]},"metadata":{},"sourceType":"script"}