{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _PollView = _interopRequireDefault(require(\"./PollView\"));\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\camer\\\\Documents\\\\GitHub\\\\pollish-rn\\\\screens\\\\HomeScreen.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar BASE_URL = 'http://192.168.1.140:8000';\n\nvar HomeScreen = function HomeScreen() {\n  var _useState = (0, _react.useState)(false),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = (0, _react.useState)([]),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      posts = _useState4[0],\n      setPosts = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(null),\n      _useState6 = (0, _slicedToArray2.default)(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  (0, _react.useEffect)(function () {\n    fetchDataFromApi();\n  }, []);\n\n  var fetchDataFromApi = function _callee() {\n    var url, res;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = BASE_URL + \"/polls/\";\n            setLoading(true);\n            res = fetch(url, {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            }).then(function (res) {\n              return res.json();\n            }).then(function (data) {\n              setPosts(data);\n              setLoading(false);\n            }).catch(function (error) {\n              console.error(error);\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _react.default.createElement(_reactNative.ScrollView, {\n    decelerationRate: 0,\n    horizontal: true,\n    snapToAlignment: \"center\",\n    snapToInterval: 150,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, _react.default.createElement(_reactNative.View, {\n    style: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexDirection: 'column'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, posts.map(function (post, idx) {\n    return _react.default.createElement(_PollView.default, {\n      key: idx,\n      question: post.question_text,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 16\n      }\n    });\n  })));\n};\n\nvar _default = HomeScreen;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/camer/Documents/GitHub/pollish-rn/screens/HomeScreen.js"],"names":["BASE_URL","HomeScreen","loading","setLoading","posts","setPosts","error","setError","fetchDataFromApi","url","res","fetch","method","headers","then","json","data","catch","console","flex","alignItems","justifyContent","flexDirection","map","post","idx","question_text"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;AAEA,IAAMA,QAAQ,GAAG,2BAAjB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,kBAA8B,qBAAS,KAAT,CAA9B;AAAA;AAAA,MAAOC,OAAP;AAAA,MAAgBC,UAAhB;;AACA,mBAA0B,qBAAS,EAAT,CAA1B;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AACA,mBAA0B,qBAAS,IAAT,CAA1B;AAAA;AAAA,MAAOC,KAAP;AAAA,MAAcC,QAAd;;AAEA,wBAAU,YAAM;AACdC,IAAAA,gBAAgB;AACjB,GAFD,EAEG,EAFH;;AAIA,MAAMA,gBAAgB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBC,YAAAA,GADiB,GACRT,QADQ;AAGvBG,YAAAA,UAAU,CAAC,IAAD,CAAV;AAEMO,YAAAA,GALiB,GAKXC,KAAK,CAACF,GAAD,EAAM;AACrBG,cAAAA,MAAM,EAAE,KADa;AAErBC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAFY,aAAN,CAAL,CAMTC,IANS,CAMJ,UAAAJ,GAAG;AAAA,qBAAIA,GAAG,CAACK,IAAJ,EAAJ;AAAA,aANC,EAOTD,IAPS,CAOJ,UAAAE,IAAI,EAAI;AACZX,cAAAA,QAAQ,CAACW,IAAD,CAAR;AACAb,cAAAA,UAAU,CAAC,KAAD,CAAV;AACD,aAVS,EAWTc,KAXS,CAWH,UAAAX,KAAK,EAAI;AACdY,cAAAA,OAAO,CAACZ,KAAR,CAAcA,KAAd;AACD,aAbS,CALW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAzB;;AAoBA,SACE,6BAAC,uBAAD;AACE,IAAA,gBAAgB,EAAE,CADpB;AAEE,IAAA,UAAU,MAFZ;AAGE,IAAA,eAAe,EAAC,QAHlB;AAIE,IAAA,cAAc,EAAE,GAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMA,6BAAC,iBAAD;AACE,IAAA,KAAK,EAAE;AACLa,MAAAA,IAAI,EAAE,CADD;AAELC,MAAAA,UAAU,EAAE,QAFP;AAGLC,MAAAA,cAAc,EAAE,QAHX;AAILC,MAAAA,aAAa,EAAE;AAJV,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGlB,KAAK,CAACmB,GAAN,CAAU,UAACC,IAAD,EAAOC,GAAP,EAAe;AACxB,WAAO,6BAAC,iBAAD;AAAU,MAAA,GAAG,EAAEA,GAAf;AAAoB,MAAA,QAAQ,EAAED,IAAI,CAACE,aAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CAPH,CANA,CADF;AAsBD,CAnDD;;eAqDezB,U","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport {View, Text, ScrollView} from 'react-native';\r\nimport PollView from './PollView';\r\n\r\nconst BASE_URL = 'http://192.168.1.140:8000';\r\n\r\nconst HomeScreen = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [posts, setPosts] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchDataFromApi();\r\n  }, []);\r\n\r\n  const fetchDataFromApi = async () => {\r\n    const url = `${BASE_URL}/polls/`;\r\n\r\n    setLoading(true);\r\n\r\n    const res = fetch(url, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setPosts(data);\r\n        setLoading(false);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n      });\r\n  };\r\n  return (\r\n    <ScrollView\r\n      decelerationRate={0}\r\n      horizontal\r\n      snapToAlignment=\"center\"\r\n      snapToInterval={150}\r\n    >\r\n    <View\r\n      style={{\r\n        flex: 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n      }}>\r\n      {posts.map((post, idx) => {\r\n        return <PollView key={idx} question={post.question_text}></PollView>;\r\n      })}\r\n    </View>\r\n    </ScrollView>\r\n\r\n    // <Text key={idx}>{post.question_text}</Text>;\r\n  );\r\n};\r\n\r\nexport default HomeScreen;\r\n"]},"metadata":{},"sourceType":"script"}